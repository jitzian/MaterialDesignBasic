apply plugin: 'com.android.application'
//apply plugin: 'org.robolectric'

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.0'
    defaultConfig {
        applicationId "mac.training.android.com.org.materialdesignbasic"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled false
        }
    }
    lintOptions {
        // I prefer avoiding a build fail if there is any warning, for they are only warnings
        abortOnError false
    }

//    testOptions {
//        unitTests {
//            includeAndroidResources = true
//        }
//    }
    dataBinding{
        enabled = true
    }
}
ext{
    versionSupportLib = '25.3.1'
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
//    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
//        exclude group: 'com.android.support', module: 'support-annotations'
//    })
    androidTestCompile "com.android.support:support-annotations:${versionSupportLib}"

    //RecyclerView
    compile "com.android.support:appcompat-v7:${versionSupportLib}"
    compile "com.android.support:recyclerview-v7:${versionSupportLib}"
    compile "com.android.support:cardview-v7:${versionSupportLib}"
    compile "com.android.support:design:${versionSupportLib}"
    compile "com.android.support:support-v4:${versionSupportLib}"
    testCompile 'junit:junit:4.12'

    //Glide
    compile'com.github.bumptech.glide:glide:3.7.0'

    // Espresso
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.android.support.test:testing-support-lib:0.1'

    testCompile "org.robolectric:robolectric:3.4.2"

    // Unit testing dependencies
//    unitTestCompile('junit:junit:4.12') { // Prevent duplication conflicts
//        exclude module: 'hamcrest-core'
//        exclude module: 'hamcrest-library'
//        exclude module: 'hamcrest-integration'
//    }
//    unitTestCompile 'org.hamcrest:hamcrest-core:1.1'
//    unitTestCompile 'org.hamcrest:hamcrest-library:1.1'
//    unitTestCompile 'org.hamcrest:hamcrest-integration:1.1'
//
//    unitTestCompile('org.robolectric:robolectric:2.4') {
//        exclude module: 'classworlds'
//        exclude module: 'commons-logging'
//        exclude module: 'httpclient'
//        exclude module: 'maven-artifact'
//        exclude module: 'maven-artifact-manager'
//        exclude module: 'maven-error-diagnostics'
//        exclude module: 'maven-model'
//        exclude module: 'maven-project'
//        exclude module: 'maven-settings'
//        exclude module: 'plexus-container-default'
//        exclude module: 'plexus-interpolation'
//        exclude module: 'plexus-utils'
//        exclude module: 'wagon-file'
//        exclude module: 'wagon-http-lightweight'
//        exclude module: 'wagon-provider-api'
//    }
}

// Robolectric config
//robolectric {
//    // Configure includes / excludes
//    include '**/*Test.class'
//    exclude '**/espresso/**/*.class'
//
//    // Configure max heap size of the test JVM
//    maxHeapSize = '2048m'
//
//    // Configure the test JVM arguments - Does not apply to Java 8
//    jvmArgs '-XX:MaxPermSize=512m', '-XX:-UseSplitVerifier'
//
//    // Specify max number of processes (default is 1)
//    maxParallelForks = 4
//
//    // Specify max number of test classes to execute in a test process
//    // before restarting the process (default is unlimited)
//    forkEvery = 150
//
//    // configure whether failing tests should fail the build
//    ignoreFailures false
//
//    // use afterTest to listen to the test execution results
//    afterTest { descriptor, result ->
//        println "Executing test for ${descriptor.name} with result: ${result.resultType}"
//    }
//}
//end Robolectric config

// Jacoco config
apply plugin: 'jacoco'

jacoco {
    // Use this version for upper ones are broken (with Gradle)
    // https://github.com/jacoco/jacoco/issues/288
    toolVersion = "0.7.1.201405082137"
}

// Edit covered scope if needed
// For my part I like having the coverage of both application and tests
def coverageSourceDirs = [
        '../app/src'
]

task jacocoTestReport(type: JacocoReport, dependsOn: "test") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../app/build/intermediates/classes',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../app/build/jacoco/testUnitTestDebug.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }

}
//end Jacoco config